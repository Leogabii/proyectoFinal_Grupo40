/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyFinalAtencionResto.Vistas;

import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import proyFinalAtencionResto.AccesoADatos.MesaData;
import proyFinalAtencionResto.AccesoADatos.MeseroData;
import proyFinalAtencionResto.AccesoADatos.PedidoData;
import proyFinalAtencionResto.AccesoADatos.PedidoProductoData;
import proyFinalAtencionResto.AccesoADatos.ProductoData;
import proyFinalAtencionResto.Entidades.Mesa;
import proyFinalAtencionResto.Entidades.Mesero;
import proyFinalAtencionResto.Entidades.Pedido;
import proyFinalAtencionResto.Entidades.Producto;

/**
 *
 * @author eduardo
 */
public class AltaPedido extends javax.swing.JInternalFrame {
    
    private DefaultTableModel modelo = new DefaultTableModel(){
    @Override
    public boolean isCellEditable(int fila, int columna){
        if ((columna==1) & (columna==2)){
            return true;
        }else{
            return false;
        }
    }
};
    private ArrayList<Producto> productosPedidos = new ArrayList();
    private Mesero mesero = null;
    private Producto producto=null;
    private int nroMesa;
    private int nroMozo;
    private final double IVA = 0.21; 
    private double subtotal=0;
    private double total=0;
    private static PedidoData pedidoData =  new PedidoData();
    private static MeseroData meseroData = new MeseroData();
    private static MesaData mesaData = new MesaData();
    private static ProductoData productoData = new ProductoData();
    private static PedidoProductoData pedidoProdData = new PedidoProductoData();
    private LocalDateTime locaDate;
    private String fecha1;
    private String fecha2;
    private LocalDateTime hora;
    
    
    /**
     * Creates new form AltaPedido
     */
    public AltaPedido() {
        initComponents();
         this.setSize(1150, 650);
         this.setLocation(5,5);
//          ArrancamosAFacturar();
        armarCabecera();
        cargarfecha();
        cargarComboBoxMesero();
        cargarComboBoxMesa();
        deshabilitaBotones();
                   cargarComboBoxProducto();
        jlNroPedidoPmo.setText(proximoNrodePedido()+"");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpanelDeArriba = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jlNroPedidoPmo = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jcbMesa = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jcbLegajo = new javax.swing.JComboBox<>();
        jlFecha = new javax.swing.JLabel();
        jbAceptar = new javax.swing.JButton();
        jpanelDeAbajjo = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jtCantidad = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jcbProducto = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtItems = new javax.swing.JTable();
        jbAgregar = new javax.swing.JButton();
        jlAtendido = new javax.swing.JLabel();
        jlTotal = new javax.swing.JLabel();
        jlIVA = new javax.swing.JLabel();
        jlSubtotal = new javax.swing.JLabel();
        jbAnularItem = new javax.swing.JButton();
        jbGrabar = new javax.swing.JButton();
        jbAnular = new javax.swing.JButton();
        jbSalir = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 102, 0));
        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("ALTA DE PEDIDOS");

        jpanelDeArriba.setBackground(new java.awt.Color(255, 0, 0));
        jpanelDeArriba.setAutoscrolls(true);

        jLabel1.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        jLabel1.setText("Nro. de pedido");

        jlNroPedidoPmo.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jlNroPedidoPmo.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jLabel3.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        jLabel3.setText("Ingrese Nro. de mesa");

        jcbMesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbMesaActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        jLabel4.setText("Ingrese Legajo de Mesero");

        jcbLegajo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbLegajoActionPerformed(evt);
            }
        });

        jlFecha.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        jlFecha.setText("Fecha:");

        jbAceptar.setText("Aceptar");
        jbAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAceptarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpanelDeArribaLayout = new javax.swing.GroupLayout(jpanelDeArriba);
        jpanelDeArriba.setLayout(jpanelDeArribaLayout);
        jpanelDeArribaLayout.setHorizontalGroup(
            jpanelDeArribaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelDeArribaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpanelDeArribaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpanelDeArribaLayout.createSequentialGroup()
                        .addGroup(jpanelDeArribaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jpanelDeArribaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jcbLegajo, 0, 109, Short.MAX_VALUE)
                            .addComponent(jcbMesa, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 297, Short.MAX_VALUE)
                        .addComponent(jbAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))
                    .addGroup(jpanelDeArribaLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlNroPedidoPmo, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jlFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jpanelDeArribaLayout.setVerticalGroup(
            jpanelDeArribaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelDeArribaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpanelDeArribaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlNroPedidoPmo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpanelDeArribaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbMesa, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jpanelDeArribaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpanelDeArribaLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jpanelDeArribaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jcbLegajo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpanelDeArribaLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbAceptar)
                        .addGap(14, 14, 14))))
        );

        jpanelDeAbajjo.setBackground(new java.awt.Color(0, 204, 51));
        jpanelDeAbajjo.setAutoscrolls(true);

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setText("Cantidad");

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setText("Producto");

        jtItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtItems);

        jbAgregar.setText("Agregar");
        jbAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAgregarActionPerformed(evt);
            }
        });

        jlAtendido.setBackground(new java.awt.Color(204, 204, 0));
        jlAtendido.setText("Atendido por:");

        jlTotal.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        jlTotal.setText("Total:");
        jlTotal.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(0, 0, 0)));

        jlIVA.setText("IVA: 21%");

        jlSubtotal.setText("Sub-Total:");

        jbAnularItem.setText("Anular Item");
        jbAnularItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAnularItemActionPerformed(evt);
            }
        });

        jbGrabar.setText("Grabar");
        jbGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGrabarActionPerformed(evt);
            }
        });

        jbAnular.setText("Anular");
        jbAnular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAnularActionPerformed(evt);
            }
        });

        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpanelDeAbajjoLayout = new javax.swing.GroupLayout(jpanelDeAbajjo);
        jpanelDeAbajjo.setLayout(jpanelDeAbajjoLayout);
        jpanelDeAbajjoLayout.setHorizontalGroup(
            jpanelDeAbajjoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelDeAbajjoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpanelDeAbajjoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpanelDeAbajjoLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(jpanelDeAbajjoLayout.createSequentialGroup()
                        .addGroup(jpanelDeAbajjoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpanelDeAbajjoLayout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpanelDeAbajjoLayout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcbProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47))
                    .addGroup(jpanelDeAbajjoLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jpanelDeAbajjoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jpanelDeAbajjoLayout.createSequentialGroup()
                                .addComponent(jbAnularItem, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(98, 98, 98)
                                .addComponent(jbAnular, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jlAtendido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
                        .addGroup(jpanelDeAbajjoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpanelDeAbajjoLayout.createSequentialGroup()
                                .addComponent(jbGrabar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(jbSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(51, 51, 51))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpanelDeAbajjoLayout.createSequentialGroup()
                                .addGroup(jpanelDeAbajjoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jlSubtotal, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                                    .addComponent(jlIVA, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jlTotal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())))))
        );
        jpanelDeAbajjoLayout.setVerticalGroup(
            jpanelDeAbajjoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelDeAbajjoLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jpanelDeAbajjoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpanelDeAbajjoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbAgregar)
                    .addGroup(jpanelDeAbajjoLayout.createSequentialGroup()
                        .addGroup(jpanelDeAbajjoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jpanelDeAbajjoLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jcbProducto)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jpanelDeAbajjoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpanelDeAbajjoLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jlSubtotal, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlIVA, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpanelDeAbajjoLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jlAtendido, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jlTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jpanelDeAbajjoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbGrabar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAnular, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAnularItem, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpanelDeAbajjo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jpanelDeArriba, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpanelDeArriba, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpanelDeAbajjo, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAceptarActionPerformed
    try{
        nroMesa= mesaElegida();
        nroMozo=legajoMeseroElegido();
        
        // en este if consulta a la BD el estado de la mesa y devuelve su estado
        // simulo que trae el estado en true ocupada
        
        if (!estadoDeLaMesa(nroMesa)){
            //este metodo me pasa el estado de la mesa a ocupada (true)
            modificoEstadoActual(nroMesa,true);
            habilitaBotones();
        }else if(consultaMozodeLaMeza(nroMesa,nroMozo)){
            habilitaBotones();

        }else{
            JOptionPane.showMessageDialog(this,"El mesero no esta atendiendo a esa mesa, favor de corregir al mesero elegido");
            
        }
        
        
        
        
        
        
    }catch(Exception ex){
        JOptionPane.showMessageDialog(this, ex);
    }
        
        
        
        
    }//GEN-LAST:event_jbAceptarActionPerformed

    private void jcbLegajoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbLegajoActionPerformed
        
        Mesero auxiliar = null;
        auxiliar =  (Mesero) jcbLegajo.getSelectedItem();
        nroMozo= auxiliar.getIdMesero();
        // aca trae de la base de datos los atributos del mesero segun el idmesero
        jlAtendido.setText("Atendido por:  " + auxiliar.getNombre() + "  " + auxiliar.getApellido() + "  ");
        
    }//GEN-LAST:event_jcbLegajoActionPerformed

    private void jbAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAgregarActionPerformed
        JOptionPane.showMessageDialog(this, "IMPORTANTE: si quiere eliminar un producto de la lista, hacer click en el producto y presionar boton [anular Item]  ");
                
        try{
            if(jtCantidad.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "No debe estar vacio el item cantidad, favor corregir");
                return;
            }else{
                int cantidad=Integer.parseInt(jtCantidad.getText());
                Producto producto = (Producto) jcbProducto.getSelectedItem();
                double importe = producto.getPrecio()*cantidad;
                subtotal=subtotal + importe;
                total=subtotal+ subtotal*IVA;
                Object vector[] = new Object[5];
                vector[0]=cantidad;
                vector[1]=producto.getIdProducto();
                vector[2]=producto.getNombreProducto();
                vector[3]=producto.getPrecio();
                vector[4]=importe;
                modelo.addRow(vector);
                
                
                jbAnularItem.setEnabled(true);
                jbGrabar.setEnabled(true);
                
            }
            double calculoIva = subtotal*IVA;
            
            jlSubtotal.setText("   Subtotal: $ " + subtotal+"");
                 jlIVA.setText("     IVA 21%  " +  calculoIva+""  );
            jlTotal.setText("TOTAL  A ABONAR $ " + total+"");
            jtCantidad.setText("");
            jcbProducto.setSelectedIndex(0);
           }catch(NumberFormatException nf){
            JOptionPane.showMessageDialog(this, "el campo cantidad solo acepta numeros");
         
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this, ex);
        }
        
        
        
        
        
        
    }//GEN-LAST:event_jbAgregarActionPerformed

    private void jbAnularItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAnularItemActionPerformed
       try{
           int itemAAnular=jtItems.getSelectedRow();
           if(itemAAnular!=-1){
               subtotal=subtotal-((Double) jtItems.getValueAt(itemAAnular, 4));
               double calculoIva = subtotal*IVA;
                total=subtotal+ subtotal*IVA;
                jlSubtotal.setText("   Subtotal: $ " + subtotal+"");
                 jlIVA.setText("     IVA 21%  " +  calculoIva+""  );
                jlTotal.setText("TOTAL  A ABONAR $ " + total+"");
               modelo.removeRow(itemAAnular);

           }else{
               JOptionPane.showMessageDialog(this, "haga click en el item a anular y presione el boton [Anular Item] ");
           }
           
           
           
       }catch(Exception ex){
           
       }
    }//GEN-LAST:event_jbAnularItemActionPerformed

    private void jbAnularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAnularActionPerformed
       borrarFilas();
       deshabilitaBotones();
       jtCantidad.setText("");
       jcbProducto.setSelectedIndex(0);
       jbAceptar.setEnabled(true);
       jcbLegajo.setEnabled(true);
       jcbLegajo.setSelectedIndex(0);
       jcbMesa.setEnabled(true);
       jcbMesa.setSelectedIndex(0);
       subtotal=0;
       total=0;
       jlSubtotal.setText("   Subtotal: $ ");
       jlIVA.setText("     IVA 21%  " );
       jlTotal.setText("TOTAL  A ABONAR $ ");
       
    }//GEN-LAST:event_jbAnularActionPerformed

    private void jbGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGrabarActionPerformed
        //recorre la tabla y lo guarda en un arrayList y lo pasa a pedidoProductoData para actualizar la bd
            HashMap<Integer,Integer> mapa=new HashMap();
       
        
            Pedido pedido= pedido = new Pedido();  ;
            pedido.setIdPedido(proximoNrodePedido());
            pedido.setIdMesa(nroMesa);
            pedido.setIdMesero(nroMozo);
            pedido.setFecha_hora(locaDate);
            pedido.setImporte(total);
            pedido.setCobrado(false);
        try {
            pedidoData.registrarPedido(pedido);
        } catch (SQLException ex) {
            Logger.getLogger(AltaPedido.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            for (int i=0; i<jtItems.getRowCount();i++){
                 
                Integer codigoProducto = (Integer) jtItems.getValueAt(i, 1);
                Integer valorCantidad = (Integer) jtItems.getValueAt(i, 0);
                 mapa.put(codigoProducto, valorCantidad);
        } // termina de recorrer la tabla
        try {
            pedidoProdData.registrarPedido(pedido.getIdPedido(), mapa);
            
            //***************+ aca va para registrar producto **************************
            //**********+ inserto el pedido **************
            //INSERT INTO `pedido`(`id_pedido`, `id_mesa`, `id_mesero`, `fecha_hora`, `importe`, `cobrada`) VALUES ('[value-1]','[value-2]','[value-3]','[value-4]','[value-5]','[value-6]')
            //*********** inserto productos pedidos a la tabla pedidoproducto
            //INSERT INTO `pedidoproducto`(`id_pedido_producto`, `id_pedido`, `id_producto`, `cantidad`) VALUES ('[value-1]','[value-2]','[value-3]','[value-4]')
        } catch (SQLException ex) {
            Logger.getLogger(AltaPedido.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        
        //jlHora.setText(horaActual());
        //registrarPedido(proximoNroPedido(),nroMesa,nroMozo,fechaDeHoy(),total,productosPedidos);
        resetear();
        //JOptionPane.showMessageDialog(this, "Su pedido ha sido Registrado a las:" + horaActual());
        
//        for (int i = 0; i < productosPedidos.size(); i++) {
//            
//            
//            
//            System.out.println(productosPedidos.get(i).getStock());
//            System.out.println("");
//            System.out.println(productosPedidos.get(i).getIdProducto());
//        }
//        
        
        
        
    }//GEN-LAST:event_jbGrabarActionPerformed

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jcbMesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbMesaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbMesaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbAceptar;
    private javax.swing.JButton jbAgregar;
    private javax.swing.JButton jbAnular;
    private javax.swing.JButton jbAnularItem;
    private javax.swing.JButton jbGrabar;
    private javax.swing.JButton jbSalir;
    private javax.swing.JComboBox<Mesero> jcbLegajo;
    private javax.swing.JComboBox<Mesa> jcbMesa;
    private javax.swing.JComboBox<Producto> jcbProducto;
    private javax.swing.JLabel jlAtendido;
    private javax.swing.JLabel jlFecha;
    private javax.swing.JLabel jlIVA;
    private javax.swing.JLabel jlNroPedidoPmo;
    private javax.swing.JLabel jlSubtotal;
    private javax.swing.JLabel jlTotal;
    private javax.swing.JPanel jpanelDeAbajjo;
    private javax.swing.JPanel jpanelDeArriba;
    private javax.swing.JTextField jtCantidad;
    private javax.swing.JTable jtItems;
    // End of variables declaration//GEN-END:variables

private void cargarComboBoxMesero() { // carga combobox mesero con el nro de id del mesero (legajo)
     
    try{
        List<Mesero> meseros = meseroData.listadoDeMeseros();
     for (Mesero mesero : meseros){
        jcbLegajo.addItem(mesero);
     }
    }catch(SQLException sqle){
           JOptionPane.showMessageDialog(this, sqle);
                   
             }
     }
    


private void cargarComboBoxMesa() { // carga combobox mesa con el nro de id de la mesa (legajo)
     
    try{
        List<Mesa> mesas = mesaData.listadoDeMesas();
     for (Mesa mesa : mesas){
        jcbMesa.addItem(mesa);
     }
    }catch(SQLException sqle){
           JOptionPane.showMessageDialog(this, sqle);
                   
             }
     }
    
    

 
  
//    List<Alumno> alumnos = aluData.listarAlumnos();
//     for (Alumno alu : alumnos){
//        jcbAlumno.addItem(alu);
//     }



 private void armarCabecera(){
        
        CabeceraTablaPedidos[] tope = CabeceraTablaPedidos.values();
        for (int i=0;i<tope.length;i++){
            modelo.addColumn(tope[i]);
            
        }
        
        jtItems.setModel(modelo);
        
        
        
    }

    private void borrarFilas(){
        
        int fila=jtItems.getRowCount()-1;
        for (; fila>=0; fila--) {
            modelo.removeRow(fila);
        }
        
   
        
        
    }

 private void fechaDeHoy(){

        Date fecha = new Date();
    SimpleDateFormat formato =  new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
    SimpleDateFormat formato1 =  new SimpleDateFormat("yyyy-MM-dd");
    fecha1 = formato.format(fecha).toString();
    fecha2 = formato1.format(fecha).toString();

         jlFecha.setText("Fecha: " + fecha1);       
           
    }

 private void deshabilitaBotones(){
     
     jlAtendido.setText("Atendido por:  ");
     jbAnular.setEnabled(false);
     jtCantidad.setText("");
     jtCantidad.setEnabled(false);
     jcbProducto.setEnabled(false);
     jbAgregar.setEnabled(false);
     jbAnularItem.setEnabled(false);
     jbGrabar.setEnabled(false);
     
 }
 private void habilitaBotones(){
     
     jbAnular.setEnabled(true);
     jtCantidad.setText("");
     jtCantidad.setEnabled(true);
     jcbProducto.setEnabled(true);
     jbAgregar.setEnabled(true);
     jbAnularItem.setEnabled(false);
     jbGrabar.setEnabled(false);
     jcbMesa.setEnabled(false);
     jcbLegajo.setEnabled(false);
     jbAceptar.setEnabled(false);
 }

 

private int mesaElegida(){
       
    Mesa mesaeligio = (Mesa) jcbMesa.getSelectedItem();
    int eligio = mesaeligio.getIdMesa();
    
    
    return eligio;
}
        
private int legajoMeseroElegido(){
    Mesero meseroeligio = (Mesero) jcbLegajo.getSelectedItem();
    int eligio = meseroeligio.getIdMesero();
    return eligio;
}


private boolean estadoDeLaMesa(int nroMesa){
    boolean estado=mesaData.estadoMesa(nroMesa);
    return estado;
    
}


public int ArrancamosAFacturar(){
    int opcion = JOptionPane.showConfirmDialog(this, "Ingresa un nuevo pedido?");
   return opcion;
        
}




private void  modificoEstadoActual(int nroMesa,boolean estado){
    mesaData.actualizarEstadoMesa(nroMesa, estado);
    
}

private boolean consultaMozodeLaMeza(int nroMesa, int nroMozo) throws SQLException{
    // aca controla que el mesero este atendiendo a esa mesa al dar de alta el pedido por primera vez
//    List<Integer> nroMeseros = new ArrayList();
//           String ddMMayyyy= fecha2;
//           String hora=horaActual();
//           String fechaDelDia=ddMMayyyy+hora;
//    JOptionPane.showMessageDialog(this, "consulta el dia: " + fecha2);
//    JOptionPane.showMessageDialog(this, "consulta la hora: " + hora);
           //2023-10-10 18:20:19

           
           return pedidoData.meseroQAtiendeUnaMesaDada(nroMesa, nroMozo);
           
           
           
//   nroMeseros=pedidoData.meseroQAtiendelaMesa(nroMesa);
//   
//    for (Integer nroMesero : nroMeseros) {
//        if(nroMozo==nroMesero){
//           return true;
//           }
//    }
//    return false;  
}


private void cargarComboBoxProducto(){

    try{
        List<Producto> productos = productoData.listadoDeProductos();
     for (Producto producto : productos){
        jcbProducto.addItem(producto);
     }
    }catch(SQLException sqle){
           JOptionPane.showMessageDialog(this, sqle);
                   
             }
     }
  
 
  



 private void registrarPedido(int NroPedido, int nroMesa, int nroMozo,String fechaDeHoy,double total,ArrayList<Producto> productosPedidos){
     //envia a DATA los datos actualizar las tablas
     /*
     carga tabla pedidoProducto
     carga tabla pedidos
     actualiza tabla mesa
     
     */

}


        
 
 private void resetear(){
     //borra todo para empezar otra vez a cargar pedido
     borrarFilas();
     deshabilitaBotones();
     cargarfecha();
     jlNroPedidoPmo.setText(proximoNrodePedido()+"");
     jcbProducto.setEnabled(false);
     jtCantidad.setText("");
     jbAgregar.setEnabled(false);
     jbAceptar.setEnabled(true);
     jcbMesa.setEnabled(true);
     jcbLegajo.setEnabled(true);
     subtotal=0;
     total=0;
     jlSubtotal.setText("   Subtotal: $ ");
     jlIVA.setText("     IVA 21%  " );
     jlTotal.setText("TOTAL  A ABONAR $ ");
     jcbLegajo.setSelectedIndex(0);
     jcbMesa.setSelectedIndex(0);
//     ArrancamosAFacturar();
 }
        

       
       private void horaActual(){
    LocalDateTime locaDate = LocalDateTime.now();
    int hours  = locaDate.getHour();    
    int minutes = locaDate.getMinute();
    int seconds = locaDate.getSecond();
    LocalDateTime hora = LocalDateTime.of(2023, Month.MARCH, 11, 10, 12);
           System.out.println("la fecha y dia es: "+ hora);
    
   
//      System.out.println("Hora actual : " + hours  + ":"+ minutes +":"+seconds); 
       }
       
       
       
       public LocalDateTime generaFecha_hora(){
           
           /*
           String formatoBD = hora.format(DateTimeFormatter.ofPattern("yyyy-MM-dd hh:MM:ss"));
            System.out.println("ahora es un string " + formatoBD);
             
           ahora es un string 2023-10-12 06:10:11
           String formatopantalla = hora.format(DateTimeFormatter.ofPattern("dd-MM-yyyy hh:MM:ss"));
               System.out.println("nuevo formato"+ formatopantalla); 
           
           nuevo formato12-10-2023 06:10:11
           *
           */
           
           return LocalDateTime.now();
//            LocalDateTime locaDate = LocalDateTime.now();
//            int dia = locaDate.getDayOfMonth();
//            Month mes = locaDate.getMonth();
//            int año = locaDate.getYear();
//            int hours  = locaDate.getHour();    
//            int minutes = locaDate.getMinute();
//            int seconds = locaDate.getSecond();
//            LocalDateTime hora = LocalDateTime.of(año, mes, dia, hours, minutes,seconds);
//            String formatoBD = hora.format(DateTimeFormatter.ofPattern("yyyy-MM-dd hh:MM:ss"));
//            System.out.println("ahora es un string " + formatoBD);
//             String formatopantalla = hora.format(DateTimeFormatter.ofPattern("dd-MM-yyyy hh:MM:ss"));
//               System.out.println("nuevo formato"+ formatopantalla);
               
       }
       
       public void cargarfecha(){
                       
           locaDate = generaFecha_hora();
            int dia = locaDate.getDayOfMonth();
            Month mes = locaDate.getMonth();
            int año = locaDate.getYear();
            int hours  = locaDate.getHour();    
            int minutes = locaDate.getMinute();
            int seconds = locaDate.getSecond();
            LocalDateTime hora = LocalDateTime.of(año, mes, dia, hours, minutes,seconds);
//            String formatoBD = hora.format(DateTimeFormatter.ofPattern("yyyy-MM-dd hh:MM:ss"));
//            System.out.println("ahora es un string " + formatoBD);
             String formatopantalla = hora.format(DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss"));
             jlFecha.setText("Fecha : " + formatopantalla);
       }
       
    private int proximoNrodePedido(){
    int numero=0;
    try{
     numero =  pedidoData.proximoNroPedido();
    }catch(SQLException sqle){
        JOptionPane.showMessageDialog(this, sqle);
    }
        return numero;
}
       
       
}

